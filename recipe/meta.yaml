{% set version = "1.14.1" %}

{% if numpy is not defined %}
{% set numpy = "2.0.0" %}
{% endif %}
{% set numpy_minor = numpy.split(".")[1] | int %}

package:
  name: scipy-split
  version: {{ version }}

source:
  - git_url: https://github.com/scipy/scipy.git
    git_rev: main

build:
  number: 0
  skip: true  # [py<310]
  # pypy is currently broken and on its way out anyway
  skip: true  # [python_impl == "pypy"]
  # debug
  skip: true  # [build_platform != target_platform]

requirements:
  build:
    - python                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - cython                                 # [build_platform != target_platform]
    - numpy                                  # [build_platform != target_platform]
    - pybind11                               # [build_platform != target_platform]
    - meson-python                           # [build_platform != target_platform]
    - cmake                                  # [build_platform != target_platform]
    - ninja                                  # [build_platform != target_platform]
    - pkg-config                             # [build_platform != target_platform]
    - {{ compiler('c') }}
    - {{ stdlib('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('fortran') }}              # [unix]
    # pythran code needs clang-cl on windows
    - clang                                  # [win]
    # use flang as fortran compiler on windows (uses clang driver)
    - flang                                  # [win]
    # use llvm linker for both of the above
    - lld                                    # [win]
  host:
    - compiler-rt                            # [win]
    - libblas
    - libcblas
    - liblapack
    - python
    - cython
    - meson-python
    - ninja
    - pkg-config
    - python-build
    - pybind11
    - pythran
    - numpy
    - pip

# the top-level build.{sh,bat} builds scipy, and then
# build-output.{sh,bat} installs the files
outputs:
  - name: scipy
    script: build-output.sh   # [not win]
    script: build-output.bat  # [win]
    version: {{ version }}
    requirements:
      build:
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        # only need these for the strong run exports
        - {{ compiler('c') }}
        - {{ stdlib('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('fortran') }}              # [unix]
      host:
        - libblas
        - libcblas
        - liblapack
        - python
        - cython
        - meson-python
        - ninja
        - pkg-config
        - python-build
        - pybind11
        - pythran
        - numpy
        - pip
      run:
        - python
        # numpy's run-export only requires <3 because not every package
        # is exposed as deeply to its ABI. scipy however only supports
        # the two next minor versions after the numpy we build against, see
        # https://scipy.github.io/devdocs/dev/core-dev/index.html#version-ranges-for-numpy-and-other-dependencies
        - numpy <2.{{ numpy_minor + 3 }}
        # double-check lower bound from
        # https://github.com/scipy/scipy/blob/v{{ version }}/pyproject.toml#L55
        - numpy >=1.23.5
    test:
      requires:
        - pytest
        - hypothesis
      commands:
        # absence of tests (selection)
        {% set test_folders = [
            "_lib/tests", "cluster/tests", "constants/tests", "datasets/tests",
            "fftpack/tests", "fft/tests", "integrate/tests", "interpolate/tests",
            "io/tests", "linalg/tests", "misc/tests", "ndimage/tests", "odr/tests",
            "optimize/tests", "signal/tests", "sparse/tests", "spatial/tests",
            "special/tests", "stats/tests"
        ] %}
        {% for each_folder in test_folders %}
        - test ! -d $SP_DIR/scipy/{{ each_folder }}                               # [unix]
        - if exist %SP_DIR%\scipy\{{ "\\".join(each_folder.split("/")) }} exit 1  # [win]
        {% endfor %}

        # absence of testing DSOs (selection)
        {% set test_libraries = [
            "_lib/_test_ccallback", "integrate/_test_multivariate", "io/_test_fortran",
            "ndimage/_ctest", "ndimage/_cytest", "special/_test_internal"
        ] %}
        {% set PY_ABI = "cpython-" ~ PY_VER.replace(".", "") %}                         # [unix]
        {% set PY_ABI = "cp" ~ PY_VER.replace(".", "") %}                               # [win]
        {% set ARCH = "x86_64" if x86 else ("aarch64" if aarch64 else "powerpc64le")%}  # [linux]
        {% for each_lib in test_libraries %}
        - test ! -f $SP_DIR/scipy/{{ each_lib }}.{{ PY_ABI }}-{{ ARCH }}-linux-gnu.so                     # [linux]
        - test ! -f $SP_DIR/scipy/{{ each_lib }}.{{ PY_ABI }}-darwin.so                                   # [osx]
        - if exist %SP_DIR%\scipy\{{ "\\".join(each_lib.split("/")) }}.{{ PY_ABI }}-win_amd64.pyd exit 1  # [win]
        {% endfor %}

  - name: scipy-tests
    script: build-output.sh   # [not win]
    script: build-output.bat  # [win]
    build:
      ignore_run_exports:     # [win]
        - libflang            # [win]
    requirements:
      build:
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        - cython                                 # [build_platform != target_platform]
        - numpy                                  # [build_platform != target_platform]
        - pybind11                               # [build_platform != target_platform]
        - meson-python                           # [build_platform != target_platform]
        - cmake                                  # [build_platform != target_platform]
        - ninja                                  # [build_platform != target_platform]
        - pkg-config                             # [build_platform != target_platform]
        - {{ compiler('c') }}
        - {{ stdlib('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('fortran') }}              # [unix]
        - clang                                  # [win]
        - flang                                  # [win]
        - lld                                    # [win]
        - sed                                    # [unix]
        - m2-sed                                 # [win]
      host:
        - {{ pin_subpackage('scipy', exact=True) }}
        - libblas
        - libcblas
        - liblapack
        - python
        - pip
        - cython
        - meson-python
        - ninja
        - pkg-config
        - python-build
        - pybind11
        - pythran
        - numpy
      run:
        - {{ pin_subpackage('scipy', exact=True) }}
        - python
    test:
      requires:
        - pytest
        - pytest-timeout
        - pytest-xdist
        - hypothesis
        - mpmath
        # needed for scipy.datasets
        - pooch
      commands:
        {% set tests_to_skip = "_not_a_real_test" %}
        # scipy/scipy#19210 - 60 failing tests!
        {% set tests_to_skip = tests_to_skip + " or (TestQR and (delete_f or insert_f or update_f))" %}   # [aarch64]
        {% set tests_to_skip = tests_to_skip + " or (TestLstsq and test_random_overdet)" %}               # [aarch64]
        {% set tests_to_skip = tests_to_skip + " or (test_lapack.py and (" %}                             # [aarch64]
            {% set tests_to_skip = tests_to_skip + " test_pftri or test_pstrf or test_pstf2" %}           # [aarch64]
            {% set tests_to_skip = tests_to_skip + " or test_sfrk_hfrk or TestBlockedQR" %}               # [aarch64]
        {% set tests_to_skip = tests_to_skip + "))" %}                                                    # [aarch64]
        # on the slowest agents, these tests take more than 20min in emulation
        {% set tests_to_skip = tests_to_skip + " or test_mixed_threads_processes or test_sf_gh18506" %}   # [aarch64 or ppc64le]
        {% set tests_to_skip = tests_to_skip + " or (test_lsq_linear and test_large_rank_deficient)" %}   # [aarch64 or ppc64le]
        {% set tests_to_skip = tests_to_skip + " or (test_iterative and test_precond_inverse)" %}         # [aarch64 or ppc64le]
        {% set tests_to_skip = tests_to_skip + " or (test_multiprocess and fft)" %}                       # [aarch64 or ppc64le]
        {% set tests_to_skip = tests_to_skip + " or (test_optimize and TestBrute and test_workers)" %}    # [aarch64 or ppc64le]
        {% set tests_to_skip = tests_to_skip + " or (TestLstsq and test_random_complex_exact)" %}         # [aarch64 or ppc64le]
        {% set tests_to_skip = tests_to_skip + " or (TestLevyStable and test_location_scale)" %}          # [aarch64 or ppc64le]
        {% set tests_to_skip = tests_to_skip + " or (TestShgoArguments and test_19_parallelization)" %}   # [aarch64 or ppc64le]
        {% set tests_to_skip = tests_to_skip + " or (TestDifferentialEvolutionSolver and (test_immediate_updating or test_parallel))" %}    # [aarch64 or ppc64le]
        # tests that run into timeouts (set in scipy test suite) in emulation
        {% set tests_to_skip = tests_to_skip + " or (test_propack and test_examples)" %}                  # [aarch64 or ppc64le]
        # show SIMD features (some failures occur depending on presence/absence of e.g. AVX512)
        - python -c "import numpy; numpy.show_config()"
        # tests for ppc64le and aarch64 are run in emulation through QEMU; as this takes
        # much longer, do not run the most heavy-weight tests, i.e. use label='fast'
        {% set label = "'fast'" if (aarch64 or ppc64le) else "'full'" %}
        # for signature of scipy.test see below (note default: label='fast'):
        # https://github.com/scipy/scipy/blob/v1.7.0/scipy/_lib/_testutils.py#L27
        {% set param = "verbose=1, label=" + label + ", tests=None" %}
        {% set extra = "extra_argv=['-k', 'not (" + tests_to_skip + ")', '-nauto', '--timeout=1200', '--durations=50']" %}
        - python -c "import scipy, sys; sys.exit(not scipy.test({{ param }}, {{ extra }}))"

about:
  home: http://www.scipy.org/
  license: BSD-3-Clause
  license_file: LICENSE.txt
  summary: Scientific Library for Python
  description: |
    SciPy is a Python-based ecosystem of open-source software for mathematics,
    science, and engineering.
  doc_url: http://www.scipy.org/docs.html
  dev_url: https://github.com/scipy/scipy

extra:
  recipe-maintainers:
    - jakirkham
    - msarahan
    - rgommers
    - ocefpaf
    - h-vetinari
  feedstock-name: scipy
